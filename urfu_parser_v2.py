import requests
import json


class UrfuParser:
    def __init__(self):
        self.api_url = "https://urfu.ru/api/entrant/"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        })

    def search_by_id(self, student_id):
        """
        –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö –ø–æ ID –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ API
            params = {
                'page': 1,
                'size': 10,
                'search': str(student_id)
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = self.session.get(self.api_url, params=params)

            if response.status_code != 200:
                return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code}"}

            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            data = response.json()

            if not data or 'items' not in data or len(data['items']) == 0:
                return {"error": "–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ) –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞
            entrant = data['items'][0]

            if 'applications' not in entrant or len(entrant['applications']) == 0:
                return {"error": "–£ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞—è–≤–ª–µ–Ω–∏–π"}

            results = []

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞
            for application in entrant['applications']:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö
                exams_info = self.extract_exam_info_from_api(application.get('marks', {}))

                if exams_info:
                    result = {
                        "direction": application.get('speciality', ''),
                        "program": application.get('program', ''),
                        "institute": application.get('institute', ''),
                        "form": application.get('familirization', ''),
                        "competition": application.get('competition', ''),
                        "status": application.get('status', ''),
                        "priority": application.get('priority', ''),
                        "total_mark": application.get('total_mark', ''),
                        "exams": exams_info
                    }
                    results.append(result)

            if results:
                return {"success": True, "data": results}
            else:
                return {"error": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"}

    def extract_exam_info_from_api(self, marks_data):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö –∏–∑ API –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            exams = []

            for subject, info in marks_data.items():
                mark = info.get('mark', '–ù/–î')
                case = info.get('case', '–ù/–î')
                exams.append(f"{subject}: {mark} ({case})")

            return exams

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫–∑–∞–º–µ–Ω–∞—Ö: {e}")
            return []

    def format_result_for_telegram(self, result_data):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        """
        if not result_data.get('success'):
            return f"‚ùå {result_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

        message = "üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö:**\n\n"

        for i, application in enumerate(result_data['data'], 1):
            message += f"**{i}. {application['direction']}**\n"
            message += f"üìö –ü—Ä–æ–≥—Ä–∞–º–º–∞: {application['program']}\n"
            message += f"üèõ –ò–Ω—Å—Ç–∏—Ç—É—Ç: {application['institute']}\n"
            message += f"üìñ –§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {application['form']}\n"
            message += f"üéØ –ö–æ–Ω–∫—É—Ä—Å: {application['competition']}\n"
            message += f"üìä –°—Ç–∞—Ç—É—Å: {application['status']}\n"
            message += f"üî¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {application['priority']}\n"
            message += f"üìà –û–±—â–∏–π –±–∞–ª–ª: {application['total_mark']}\n"

            message += "\nüìù **–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è:**\n"
            for exam in application['exams']:
                message += f"‚Ä¢ {exam}\n"

            message += "\n" + "‚îÄ" * 30 + "\n\n"

        return message


def test_parser():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
    """
    parser = UrfuParser()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º ID
    test_id = "4475115"
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Å ID: {test_id}")

    result = parser.search_by_id(test_id)
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(json.dumps(result, ensure_ascii=False, indent=2))

    if result.get('success'):
        formatted = parser.format_result_for_telegram(result)
        print("\n–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Telegram:")
        print(formatted)


if __name__ == "__main__":
    test_parser()

